name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  build:
    name: Build & Run on ${{ matrix.os }} / ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
          # MacOS
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-11-arm
            target: aarch64-pc-windows-msvc

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}
          components: clippy

      # Cache dependencies to speed up builds
      - name: Cache Cargo Registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      # Bump version
      - name: Install Cargo Bump
        run: cargo install cargo-bump

      - name: Bump Version
        run: cargo bump ${{ github.event.inputs.version_bump }}

      # Linux build
      - name: Install Cross
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build and Test (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cross build --release --verbose --target ${{ matrix.target }}
          cross test --release --verbose --target ${{ matrix.target }}

      - name: Install Cargo Deb
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-deb --version 2.11.1 --force

      - name: Generate Deb Package
        if: matrix.os == 'ubuntu-latest'
        run: cargo deb --no-build --no-strip --output tabiew-${{ matrix.target }}.deb --target ${{ matrix.target }}

      - name: Install Cargo RPM
        if: matrix.os == 'ubuntu-latest'
        run: cargo install cargo-generate-rpm --version 0.16.0 --force

      - name: Generate RPM Packages
        if: matrix.os == 'ubuntu-latest'
        run: cargo generate-rpm --output tabiew-${{ matrix.target }}.rpm --target ${{ matrix.target }}

      # MacOS and Windows build 
      - name: Build and Test (Windows & MacOS)
        if: matrix.os != 'ubuntu-latest'
        run: |
          rustup target add ${{ matrix.target }}
          cargo build --release --target ${{ matrix.target }}
          cargo test --release --target ${{ matrix.target }}

      # Upload compiled binary to GitHub artifact
      - name: Upload Binary to GitHub Artifact (Linux and MacOS)
        if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tw-${{ matrix.target }}
          path: target/${{ matrix.target }}/release/tw

      - name: Upload Binary to GitHub Artifact (Windows)
        if: matrix.os == 'windows-latest' || matrix.os == 'windows-11-arm'
        uses: actions/upload-artifact@v4
        with:
          name: tw-${{ matrix.target }}.exe
          path: target/${{ matrix.target }}/release/tw.exe

      # Upload Deb and RPM
      - name: Upload Deb Package to GitHub Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tabiew-${{ matrix.target }}.deb
          path: tabiew-${{ matrix.target }}.deb

      - name: Upload RPM Package to GitHub Artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: tabiew-${{ matrix.target }}.rpm
          path: tabiew-${{ matrix.target }}.rpm

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Bump version
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Install Cargo Bump
        run: cargo install cargo-bump

      - name: Bump Version
        run: cargo bump ${{ github.event.inputs.version_bump }}

      - name: Fetch Crate Version
        run: |
          VERSION="$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')"
          echo "CRATE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "New crate version: $VERSION"

      # Commit new version
      - name: Commit and Push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add Cargo.*
          git commit -m "v${{ env.CRATE_VERSION }}"
          git push
          git tag "v${{ env.CRATE_VERSION }}"
          git push origin "v${{ env.CRATE_VERSION }}"
      

      # Download artifacts
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: uploads/
        
      - name: List Compiled Artifacts
        run: ls uploads

      # Make the release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ env.CRATE_VERSION }}
          name: v${{ env.CRATE_VERSION }}
          draft: false
          prerelease: false
          files: |
            uploads/*

      # Publish to crates.io
      - name: Clean Up Project
        run: |
          cargo clean
          rm -rf .git
          rm -rf uploads

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_TOKEN }}